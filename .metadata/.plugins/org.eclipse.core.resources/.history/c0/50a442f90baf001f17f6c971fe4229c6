package es.deusto.sd.google.facade;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import es.deusto.sd.strava.dto.LoginDTO;
import es.deusto.sd.strava.dto.UserDTO;
import es.deusto.sd.strava.entity.User;
import es.deusto.sd.strava.service.AuthService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.parameters.RequestBody;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;

@RestController
@RequestMapping("/auth")
@Tag(name = "Authentication Controller", description = "User authentication operations")
public class AuthController {

    @Autowired
    private AuthService authService;

    /**
     * Registers a new user in the system.
     */
    @PostMapping("/register")
    @Operation(
        summary = "Register a new user",
        description = "Registers a user with the provided details.",
        responses = {
            @ApiResponse(responseCode = "200", description = "User registered successfully"),
            @ApiResponse(responseCode = "400", description = "Registration failed. User may already exist."),
            @ApiResponse(responseCode = "500", description = "Internal server error")
        }
    )
    public ResponseEntity<String> register(@RequestBody UserDTO userDTO) {
        try {
            User user = new User(
                userDTO.getName(),
                userDTO.getBirthdate(),
                userDTO.getHeight(),
                userDTO.getWeight(),
                userDTO.getMaxHR(),
                userDTO.getRestHR(),
                userDTO.getEmail(),
                userDTO.getAccountType()
            );

            User registeredUser = authService.register(user); // Devuelve directamente el User
            if (registeredUser != null) {
                return new ResponseEntity<>("User registered successfully.", HttpStatus.OK);
            } else {
                return new ResponseEntity<>("Registration failed. User may already exist.", HttpStatus.BAD_REQUEST);
            }
        } catch (Exception e) {
            return new ResponseEntity<>("Error during registration: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Logs in a user and generates a token.
     */
    @PostMapping("/login")
    @Operation(
        summary = "User login",
        description = "Validates user credentials and returns an authentication token.",
        responses = {
            @ApiResponse(responseCode = "200", description = "User logged in successfully"),
            @ApiResponse(responseCode = "401", description = "Login failed. Invalid credentials."),
            @ApiResponse(responseCode = "500", description = "Internal server error")
        }
    )
    public ResponseEntity<String> login(@RequestBody LoginDTO loginDTO) {
        try {
            String token = authService.login(loginDTO.getEmail(), loginDTO.getPass()); // Devuelve directamente el token
            if (token != null) {
                return new ResponseEntity<>("User logged in successfully. Token: " + token, HttpStatus.OK);
            } else {
                return new ResponseEntity<>("Login failed. Invalid credentials.", HttpStatus.UNAUTHORIZED);
            }
        } catch (Exception e) {
            return new ResponseEntity<>("Error during login: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Logs out a user by invalidating their token.
     */
    @PostMapping("/logout")
    @Operation(
        summary = "User logout",
        description = "Invalidates the user's authentication token.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Logout successful"),
            @ApiResponse(responseCode = "401", description = "Invalid token."),
            @ApiResponse(responseCode = "500", description = "Internal server error")
        }
    )
    public ResponseEntity<String> logout(
            @RequestHeader("Authorization") @Parameter(
                name = "token",
                description = "Bearer token for the user",
                required = true,
                example = "Bearer token") String token) {
        try {
            boolean result = authService.logout(token);
            if (result) {
                return new ResponseEntity<>("Logout successful.", HttpStatus.OK);
            } else {
                return new ResponseEntity<>("Invalid token.", HttpStatus.UNAUTHORIZED);
            }
        } catch (Exception e) {
            return new ResponseEntity<>("Error during logout: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}
